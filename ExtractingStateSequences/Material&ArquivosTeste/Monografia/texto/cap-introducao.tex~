%% ------------------------------------------------------------------------- %%
\chapter{Introduction}
\label{cap:introducao}

Testing is one of the most used methods to assure the quality of a system in software engineering and it typically consumes from 40\% up to 50\% of the software development effort \cite{Luo}. As presented in \cite{Ammann:08}, the goal of testing ranges depending on the maturity level of the organization that is executing the tests: from debugging code, at a more inexperienced level, to a mental discipline that helps all professionals in the software industry to increase quality, at a higher level. The testing activity is generally guided be the execution of test cases

Paragrafo sobre statecharts. Explicar brevemente.

Paragrafo falando de metodos formais. Contexto, historia.

Formal methods and testing can be considered complementary techniques in software engineering to reduce the number of errors and increase the reliability of the system\cite{fortest}. Even though testing is the activity that is most commonly used in industry to assure the software quality, it cannot guarantee the absence of errors in the code. Formal approaches, such as formal verification, on the other hand, can prove that no bugs are left. The model checking technique, for instance, proves that, certain user defined properties are true for a given model of the system.


This project proposes a study on the set of test cases generated from specifications in order to guide properties definitions. First, a technique to automatically generate test cases from Statechart specification is presented. Then, all test cases are observed and a technique to synthesize properties from the acquired test cases is proposed. 

\section{Motivation}

In the model driven development, test cases to validate systems can be generated from a model that represents how the system must behave. For instance, if the services to be provided by a system are described in Statecharts models, one can  automatically generate test cases for programs from such models. However, properties to be proved in a system are not synthesized from such models. In general, developers take the system specification and observe its restrictions to then define which properties should be satisfied. However, creating such properties requires a strong mathematical background and translating system requirements to formal properties is not trivial task\cite{Prospec}.

\section{Goals}

\begin{itemize}

\item Implement an algorithm to automatically generate test cases based on statechart specifications

\item Implement a technique to automatically analyse a set of test cases and extract the events, and sequences of events, that are found in such whole set

\item Using the previous information, synthesize properties to be used by model check programs 

\item Develop a tool to help these tasks

\end{itemize}

\section{Organization}

In chapter \ref{cap:conceitos}, we present the concepts studied to make this project possible. In chapter \ref{cap:testgen}, we describe an technique implemented to automatically generate test cases from statechart models. In chapter \ref{cap:propextract}, we propose a technique to synthesize formal properties based on the previously obtained test cases. Chapter \ref{cap:casestudy} presents a case study demonstrating the usage of the implemented tools. Our conclusions regarding this project can be found in chapter \ref{cap:conclusoes}. In chapter \ref{cap:subjective}, subjective aspects of the project that were relevant to the author are presented. Finally, the syntax of the linear temporal logic, the logic used in the generated formal properties, can be found in apedix \ref{ape-ltl}.
